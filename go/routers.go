/*
 * Desafio conductor
 *
 * Api para controle de trasacoes de contas
 *
 * API version: 1.0.0
 * Contact: thiagorodriguescamara@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/ThiagoRodriguesdeSantana/desafio_conductor/go/controllers"
	"github.com/ThiagoRodriguesdeSantana/desafio_conductor/go/repository"
	"github.com/gorilla/mux"
)

//Route struct
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

//Routes to api
type Routes []Route

//NewRouter routes to api
func NewRouter(pathDb string) *mux.Router {

	db := repository.InitDB(pathDb)

	controller := controllers.NewController(db)

	var routes = Routes{
		Route{
			"Index",
			"GET",
			"/v1/",
			Index,
		},

		Route{
			"Account",
			strings.ToUpper("Get"),
			"/conductor/v1/contas/{id}",
			controller.Account,
		},

		Route{
			"Accounts",
			strings.ToUpper("Get"),
			"/conductor/v1/contas/",
			controller.Accounts,
		},

		Route{
			"Transactions",
			strings.ToUpper("Get"),
			"/conductor/v1/contas/{id}/transacoes/",
			controller.Transactions,
		},

		Route{
			"TransactionsPdf",
			strings.ToUpper("Get"),
			"/conductor/v1/contas/{id}/transacoes.pdf/",
			controller.TransactionsPDF,
		},
	}

	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	sh := http.StripPrefix("/swaggerui/", http.FileServer(http.Dir("./go/swaggerui/")))
	router.PathPrefix("/swaggerui/").Handler(sh)

	return router
}

//Index to first endpoint
func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}
